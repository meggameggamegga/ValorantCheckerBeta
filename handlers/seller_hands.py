import datetime
import json
import logging

import time


from aiogram.dispatcher.filters import Command, state

import config
from checker import ClientAcc
from db.base_db import DataBase
from filter.Language_filter import *
from filter.is_admin import *
from filter.is_seller import IsAdmin_MSG, IsAdmin_CALL

from keyboards.inline import auth_menu, cb
from keyboards.inline_lang import cb_settings
from keyboards.sell_acc_keyb import cb_sell_acc
from keyboards.seller_keyb import seller_lk, cb_seller_lk

from main import bot,dp
from states.state import StartState, AdminState, LKSeller
from valo_lib import Auth
from src.screen_skins import image_skins
db = DataBase('test.db')


from aiogram import types
from aiogram.dispatcher import FSMContext

logger = logging.getLogger('app.seller_hands')

#–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Å–µ–ª–ª–µ—Ä–æ–≤
@dp.message_handler(IsAdmin_MSG(),Command('seller'))
async def seller_cmnd(message:types.Message):
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ start_cmnd –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}')
    await message.answer('–ü—Ä–∏–≤–µ—Ç!',reply_markup=seller_lk())#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞

@dp.callback_query_handler(IsAdmin_CALL(),cb_seller_lk.filter(action='set_lk'))
async def set_lk_status(call:types.CallbackQuery):
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ set_lk_status –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.message.chat.first_name}')
    await call.answer()
    await call.message.answer('üìä –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏:\n'
                              '‚úÖ –£—Å–ø–µ—à–Ω–æ - –µ—Å–ª–∏ —Å–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ –∏ –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ–¥–∞–ª –≤–∞–º –∞–∫–∫–∞—É–Ω—Ç\n'
                              '‚ùå –û—Ç–º–µ–Ω–∞ - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∞–º –Ω–∞–ø–∏—Å–∞–ª, –Ω–æ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –±—ã–ª –∫—É–ø–ª–µ–Ω.\n'
                              'üìù –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: <b>—Å—Ç–∞—Ç—É—Å:ID_–∞–∫–∫–∞—É–Ω—Ç–∞</b>')

    await LKSeller.set_status_lk.set()

@dp.message_handler(IsAdmin_MSG(),state=LKSeller.set_status_lk)
async def add_status_lk(message:types.Message,state:FSMContext):
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ add_status_lk –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}')
    status = message.text.split(':')[0]
    label = message.text.split(':')[1]
    buyer_id = db.get_buyer_id(message.from_user.id)
    #–ï—Å–ª–∏ —Å–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –≥—É–¥
    if status == '–£—Å–ø–µ—à–Ω–æ':
        #–ë–µ—Ä–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã c ID –±–∞–µ—Ä–æ–º
        db.set_status_seller(status,label,buyer_id[0])
        all_label_status = db.get_status_buyer(label)
        #–ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –Ω–∏–º
        for label_status in all_label_status:
            if label_status[0] != '–£—Å–ø–µ—à–Ω–æ':
                db.set_status_seller('–û—Ç–º–µ–Ω–∞',label,label_status[1])

    else:
        db.set_status_seller(status,label,buyer_id[0])
    await message.reply(f'–°—Ç–∞—Ç—É—Å –¥–ª—è {label} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {status}')
    await state.reset_state()


@dp.callback_query_handler(IsAdmin_CALL(),cb_seller_lk.filter(action='get_deals'))
async def get_deals_seller(call:types.CallbackQuery):
    pass
