
import json
import logging


from checker import ClientAcc

from filter.is_admin import *

from keyboards.inline import auth_menu, cb

from keyboards.sell_acc_keyb import sell_acc_keyboard, cb_sell_acc, sell_acc_buyer, cb_sell_buyer, sell_acc_client

from main import bot,dp
from states.state import BuyerState

from src.screen_skins import image_skins
import string
import random
db = DataBase('test.db')


from aiogram import types
from aiogram.dispatcher import FSMContext

logger = logging.getLogger('app.sell_acc')

@dp.callback_query_handler(cb.filter(action='sell_acc'))
async def sell_acc_info(call:types.CallbackQuery,state:FSMContext):
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ sell_acc_info –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.message.chat.first_name}')
    #–ü—Ä–æ–≤–µ–∫–∞,–µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–∫ –æ–∂–∏–¥–∞–Ω–∏–µ (—Å—Ç–∞—Ç—É—Å)
    letters_and_digits = string.ascii_lowercase + string.digits  # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –±—É–∫–≤–∞–º–∏
    label = '#' + ''.join(random.sample(letters_and_digits, 5))
    async with state.proxy() as data:
        username = data['username']
        data['label'] = label
    await call.message.edit_text(f'ü§ñ –ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–¥–∞–∂–∞?\n'
                              f'–ï—Å–ª–∏ –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n'
                              f'üéÆ - <b>–°–∫–∏–Ω–æ–≤</b>\n'
                              f'üåé - <b>–†–µ–≥–∏–æ–Ω–∞</b>\n'
                              f'üîó - <b>–ü—Ä–∏–≤—è–∑–∫–∏</b>\n'
                              f'‚öî - <b>–ö—Ä–∞–π–Ω–µ–≥–æ –º–∞—Ç—á–∞</b>\n'
    f'–¢–æ –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–∞–º —Ü–µ–Ω—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.\n'
    f'–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ <b>{username}?</b>\n\n'
    f'<b>‚ùó–í–ê–ñ–ù–û‚ùó\n</b>'
    f'<b>-–ê–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å –ø–æ—á—Ç–æ–π (–∞—Ç–≤–æ—Ä–µ–≥ –∏ —Ç–ø.) –∏–ª–∏ —Å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π\n</b>',reply_markup = sell_acc_keyboard())

@dp.callback_query_handler(cb_sell_acc.filter(action='send_acc'))
async def sell_acc_send_buy(call:types.CallbackQuery,state:FSMContext):
    await call.answer()
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ sell_acc_send_buy –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.message.chat.first_name}')
    async with state.proxy() as data:
        username = data['username']
        password = data['password']
        ent_token = data['entitlements_token']
        acc_token = data['access_token']
        region = data['region']
        puuid = data['puuid']
        label = data['label']
        phone_verif = data["verif_phone"]
        mail_verif = data['verif_mail']
    client = ClientAcc(username=username,password=password)
    if not client:
        cur_state = await state.get_state()
        if cur_state:
            await state.reset_state()
        await call.message.reply('–ü–æ—Ö–æ–∂–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–º–µ–Ω—è–ª–∏—Å—å',reply_markup=auth_menu('Auth'))
    else:
        items = client.get_items(item='e7c63390-eda7-46e0-bb7a-a6abdacd2433',
                                 ent_token=ent_token,
                                 region=region,
                                 acc_token=acc_token,
                                 puuid=puuid)
        accounts = client.get_my_account(ent_token=ent_token,
                                         region=region,
                                         acc_token=acc_token,
                                         puuid=puuid)

        with open('purchasableSkins.json', 'r') as file:
            prices = json.load(file)
        # ID –≤—Å–µ—Ö —Å–∫–∏–Ω–æ–≤
        with open('skins_data.json', 'r', encoding='UTF8') as skins_file:
            skins_data = json.load(skins_file)
        sum_skin = 0
        price_skin = {}
        skin_full = {}
        for skin_id in items['Entitlements']:
            for skin_uuid in skins_data['data']:
                if skin_id['ItemID'] == skin_uuid['uuid']:
                    if not '—É—Ä–æ–≤–µ–Ω—å' in skin_uuid['displayName']:
                        skin_full[skin_uuid['displayName']] = skin_uuid['uuid']
                        for price in prices['data']:
                            if price['uuid'] == skin_uuid['uuid']:
                                price_skin[skin_uuid['displayName']] = price['vpCost']
        if not skin_full:
            await call.message.delete()
            await call.message.answer('<b>–°–∫–∏–Ω–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ—Ç.</b>',reply_markup=auth_menu('Login'))
        else:
            for skin, price in price_skin.items():
                sum_skin += int(price)
            print(sum_skin)
            await call.message.delete()
            await call.message.answer(f'üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ {username} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n'
                                      f'üÜî –ê–∫–∫–∞—É–Ω—Ç ID: <b>{label}</b>')
            #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —Å–µ–ª–ª–µ—Ä–∞–º
            sellers = db.get_selleres()
            for seller in sellers:
                urls_photo = image_skins(skin_full,lang='RU')
                #–¢—É—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –±—ã ID —é–∑–µ—Ä–∞ —Å–µ–ª–ª—Ä–∞ –¥–æ–±–∞–≤–∏–ª–æ—Å—å
                db.add_account(user_id=call.message.chat.id,label=label,login=username,password=password,status='–û–∂–∏–¥–∞–Ω–∏–µ',buyer_id=seller[0])
                for photo in urls_photo:
                    await bot.send_photo(chat_id=int(seller[1]),
                                     photo=types.InputFile(photo))
            if accounts['Rank'] is None:
                if phone_verif == False:
                    phone_verif = '‚ùå'
                else:
                    phone_verif = '‚úÖ'
                if mail_verif == False:
                    mail_verif = '‚ùå'
                else:
                    mail_verif = '‚úÖ'
                last_match = accounts['last_match']
                sellers = db.get_selleres()
                for seller in sellers:
                    await bot.send_message(chat_id=int(seller[1]),text=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ\n'
                                             f'üåü–†–∞–Ω–≥:Unranked\n'
                                             f'üåç–†–µ–≥–∏–æ–Ω: <b>{region}</b>\n'
                                             f'üèÜ–ö—Ä–∞–π–Ω–∏–π –º–∞—Ç—á:<b>{last_match}</b>\n'
                                             f'üí∞–°—É–º–º–∞ —Å–∫–∏–Ω–æ–≤: {sum_skin}VP\n'
                                             f'üìß–ü–æ—á—Ç–∞:{mail_verif}\n'
                                             f'üìû–¢–µ–ª–µ—Ñ–æ–Ω:{phone_verif}\n'
                                             f'üìß–ê–∫–∫–∞—É–Ω—Ç ID: <b>{label}</b>'
                                             ,reply_markup=sell_acc_buyer(call.message.chat.id,label))
            else:
                if phone_verif == False:
                    phone_verif = '‚ùå'
                else:
                    phone_verif = '‚úÖ'
                if mail_verif == False:
                    mail_verif = '‚ùå'
                else:
                    mail_verif = '‚úÖ'
                rank = config.ranks[accounts['Rank']]
                sellers = db.get_selleres()
                last_match = accounts['last_match']
                for seller in sellers:
                    await bot.send_message(chat_id=int(seller[1]), text=f'üåç –†–µ–≥–∏–æ–Ω: <b>{region}</b>\n'
                                                                        f'üåü –†–∞–Ω–≥: <b>{rank}</b>\n'
                                                                        f'üí∞ –°—É–º–º–∞ —Å–∫–∏–Ω–æ–≤: {sum_skin}VP\n'
                                                                        f'üèÜ –ö—Ä–∞–π–Ω–∏–π –º–∞—Ç—á:<b>{last_match}</b>\n'
                                                                        f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_verif}\n'
                                                                        f'üìß –ü–æ—á—Ç–∞: {mail_verif}'
                                                                        f'–ê–∫–∫–∞—É–Ω—Ç ID: <b>{label}</b>',reply_markup=sell_acc_buyer(call.message.chat.id, label))


@dp.callback_query_handler(cb_sell_buyer.filter(action='send_price'),state='*')
async def choose_price_to_user(call:types.CallbackQuery,state:FSMContext,callback_data:dict):
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ choose_price_to_user –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.message.chat.first_name}')
    await call.answer()
    async with state.proxy() as data:
        data['client_id'] = callback_data.get('client_id')
        data['label'] = callback_data.get('label')
    label = callback_data.get('label')
    buyer_id = db.get_buyer_id(call.message.chat.id)
    statuses_deals = db.get_cur_status(label,buyer_id[0])[0]
    if statuses_deals == '–û—Ç–º–µ–Ω–∞':
        await call.message.delete()
        await call.message.answer(f'–ê–∫–∫–∞—É–Ω—Ç <b>{label}</b> —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω')
        await state.reset_state()
    elif statuses_deals == '–£—Å–ø–µ—à–Ω–æ':
        await call.message.delete()
        await call.message.answer(f'–í—ã —É–∂–µ –ø—Ä–æ–¥–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç <b>{label}</b>!')
        await state.reset_state()
    else:
        await call.message.answer(f'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∞–∫–∫–∞—É–Ω—Ç <b>{label}</b>:\n')
        await BuyerState.send_price.set()

@dp.message_handler(state=BuyerState.send_price)
async def send_price_user(message:types.Message,state:FSMContext):
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ send_price_user –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}')
    buyer_id = db.get_buyer_id(message.from_user.id)
    async with state.proxy() as data:
        label = data['label']
        client_id = data['client_id']
    await bot.send_message(chat_id=client_id, text=f'üÜî <b>–ê–∫–∫–∞—É–Ω—Ç ID:</b> {label}\n'
                                                   f'üë• –ë–∞–µ—Ä #{buyer_id[0]}\n'
                                                   f'üí≤ –¶–µ–Ω–∞: {message.text} —Ä—É–±–ª–µ–π\n'
                                                   f'üÜî –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å ID!\n'
                                                   f'üåü –£–¥–∞—á–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏!',reply_markup=sell_acc_client(message.from_user.username))

    db.add_account_price(user_id=client_id,label=label,price_buyer=message.text,
                         buyer_id=buyer_id[0])
    db.set_status(client_id,label,status='–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',buyer_id=buyer_id[0])
    await message.answer(f'üí∞ –¶–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!\n'
                         f'üÜî <b>–ê–∫–∫–∞—É–Ω—Ç ID:</b> {label}\n')

    await state.reset_state()


@dp.callback_query_handler(cb_sell_buyer.filter(action='cancel_price'),state='*')
async def cancle_price_to_user(call:types.CallbackQuery,state:FSMContext,callback_data:dict):
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ cancle_price_to_user –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.message.chat.first_name}')
    print(callback_data)
    async with state.proxy() as data:
        label = callback_data.get('label')
        client_id = callback_data.get('client_id')
    buyer_id = db.get_buyer_id(user_id=call.message.chat.id)[0]
    db.set_status(client_id,label,'–û—Ç–º–µ–Ω–∞',buyer_id)
    await call.message.delete()
    await call.message.answer(f'‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–æ–∫—É–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {label}')

