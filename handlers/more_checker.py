
import logging
import random

from filter.is_admin import *
from filter.is_subs import IsSubs_MSG
from keyboards.inline import cb, pay_check, admin_pay_accept, cb_pay, auth_menu
from main import bot,dp
from src.for_more_check import get_proxy, get_skins
from states.state import Check, PayCheck
from valo_lib_more import *
from aiohttp import ClientHttpProxyError, ContentTypeError

db = DataBase('test.db')


from aiogram import types
from aiogram.dispatcher import FSMContext

logger = logging.getLogger('app.more_checker')

@dp.callback_query_handler(cb.filter(action='pay_check'))
async def pay_for_check(call:types.CallbackQuery):
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ pay_for_check –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.message.chat.first_name}')
    await call.answer()
    await call.message.edit_text(text=f"<b>–ü–æ–¥–ø–∏—Å–∫–∞ '–ú–∞—Å—Å–æ–≤—ã–π —á–µ–∫' –Ω–∞ –º–µ—Å—è—Ü</b>\n\n"
                                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 250 —Ä—É–±–ª–µ–π\n"
                                
                                f"-------------------------------------\n"
                            
                                f"üí≥ <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>\n"
                                f"<b>LOLZ</b>- <a href='https://zelenka.guru/members/4449624/'>–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é</a> - 7% –∫–æ–º–∏—Å—Å–∏–∏\n"
                                f"<b>Crypto USDTtrc20</b> - TSduBdzNLwiy2RZBmfq3ARvBkJi1uGYezC\n"
                                f"<b>QIWI</b> - https://qiwi.com/n/MEGAMEGA\n\n"
                                f"üì© –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–∞—Ä—Ç–µ, –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n",reply_markup=pay_check(),disable_web_page_preview=True)

@dp.callback_query_handler(cb.filter(action='cancel_pay'))
async def cancel_pay_photo(call:types.CallbackQuery):
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ cancel_pay_photo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.message.chat.first_name}')
    await call.answer()
    welcome_message = (
        f'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {call.message.from_user.first_name}!\n'
        f'–Ø –±–æ—Ç-—á–µ–∫–µ—Ä –∏–≥—Ä—ã Valorant. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–∫–∏–Ω–æ–≤ –∏ –¥—Ä—É–≥–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. '
        f'–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏".'
    )
    await call.message.edit_text(text=welcome_message,reply_markup=auth_menu('Login'))


@dp.callback_query_handler(cb.filter(action='send_pay'))
async def get_pay_photo(call:types.CallbackQuery,state:FSMContext):
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ get_pay_photo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.message.chat.first_name}')
    await call.answer()
    await call.message.edit_text('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∞',reply_markup=auth_menu())
    await PayCheck.get_photo.set()

@dp.message_handler(content_types=types.ContentTypes.PHOTO,state=PayCheck.get_photo)
async def send_pay_photo(message:types.Message,state:FSMContext):
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ send_pay_photo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}')
    photo_user = message['photo'][-1]['file_id']
    await message.answer('<b>–í–∞–º –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã</b>\n')
    client_id = message.from_user.id
    await bot.send_photo(chat_id=config.ADMIN_ID,
                         photo=photo_user,
                         caption=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} | {message.from_user.id}\n',reply_markup=admin_pay_accept(client_id=client_id))
    await state.reset_state()

@dp.callback_query_handler(cb_pay.filter(action='pay_yes'))
async def accpet_subs_pay_check(call:types.CallbackQuery,callback_data:dict):
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ accpet_subs_pay –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.message.chat.first_name}')
    await call.answer()
    client_id = callback_data.get('client_id')
    await call.message.reply('–û—Ç–ø—Ä–∞–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤—è—Ç –≤ –±–æ—Ç–∞')
    await bot.send_message(chat_id=client_id,
                           text='‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!'
                                '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤–∞–º –æ–¥–æ–±—Ä—è—Ç —Ñ—É–Ω–∫—Ü–∏—é\n')

@dp.callback_query_handler(cb_pay.filter(action='pay_no'))
async def cancel_pay_accept(call:types.CallbackQuery,callback_data:dict):
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ cancel_pay_accept –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.message.chat.first_name}')
    await call.answer()
    client_id = callback_data.get('client_id')
    await call.message.answer('–û–ø–ª–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞')
    await bot.send_message(chat_id=client_id,text=f'‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞\n'
                                                    '–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –≤ –±–æ—Ç–µ\n')



@dp.callback_query_handler(cb.filter(action='more_check'))#IsSubs_MSG(),
async def more_check_menu(call:types.CallbackQuery):
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ more_check_menu –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.message.chat.first_name}')
    await call.answer()
    await call.message.edit_text(
                              '<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ</b>\n'
                              'log:pass\n'
                              'log:pass\n\n'
                              '<b>–í–∞–∂–Ω–æ</b>\n'
                              '-–î–ª—è –Ω–∞–∏–ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞, –∑–∞–∫–∏–¥—ã–≤–∞–π—Ç–µ –Ω–µ –±–æ–ª—å—à–µ 100 —à—Ç—É–∫.\n'
                              '-–ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ , –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ.\n'
                              '-–ê–∫–∫–∞—É–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.',reply_markup=auth_menu()
                            )
    await Check.checks.set()



@dp.message_handler(state=Check.checks)#IsSubs_MSG(),
async def check_check(message:types.Message,state:FSMContext):
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ check_check –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}')
    with open('proxy','r') as file:
        count_proxies = len(file.readlines())
    with open(f'no_valid_{message.from_user.first_name}.txt', 'w') as file_novalid,\
            open(f'results_{message.from_user.first_name}.txt', 'w') as file:
        accounts = message.text.split('\n')
        acc_good = {}
        regions = ['latam', 'br', 'na']
        proxy = '' #'http://pwERmR:iVTCIzRG4i@31.12.93.201:3000'#pwERmR:iVTCIzRG4i@31.12.93.201:3000
        auth_base = Auth()
        # 8 –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        account_step = 0
        account_check = 0
        proxy_stop = 0
        message_info = await message.answer(f'–ö–æ–ª-–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:<b>{len(accounts)}</b>\n'
                             f'<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–∏—à–∏—Ç–µ –∏ –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∏—á–µ–≥–æ.–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫–∞ –±–æ—Ç –∑–∞–∫–æ–Ω—á–∏—Ç —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</i>\n')
        while account_step < len(accounts):
            login = accounts[account_step].split(':')[0]
            password = accounts[account_step].split(':')[1]
            try:
                authenticate = await auth_base.authenticate(username=login, password=password, proxy=proxy)#aiohttp.client_exceptions.ClientHttpProxyError
                print(authenticate)
                print(login)
            except (ClientHttpProxyError,ContentTypeError) as e:
                    print('–°–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏')
                    proxy_get = get_proxy()[random.randrange(count_proxies)]
                    proxy = f'http://{proxy_get["username"]}:{proxy_get["password_ip"]}:{proxy_get["port"]}'
                    # authenticate = await auth_base.authenticate(username=login, password=password, proxy=proxy)
                    continue
            # –ï—Å–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥ –ø–∞—Å—Å
            if 'error' in authenticate and authenticate['error'] == 'auth_failure':
                file_novalid.writelines(f'{login} - not valid\n')
                print(f'–ù–µ –≤–∞–ª–∏–¥ {login}')
                account_step += 1
                await bot.edit_message_text(chat_id=message_info.chat.id, message_id=message_info.message_id,
                                            text=f'–ö–æ–ª-–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ:<b>{account_check + 1}</b> –∏–∑ <b>{len(accounts)}</b>')
                account_check += 1
            # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º —Å –æ–¥–Ω–æ–≥–æ IP
            elif 'error' in authenticate and authenticate['error'] == 'rate_limited':
                proxy_get = get_proxy()[proxy_stop]
                proxy = f'http://{proxy_get["username"]}:{proxy_get["password_ip"]}:{proxy_get["port"]}'
                # authenticate = await auth_base.authenticate(username=login, password=password, proxy=proxy)
                proxy_stop += 1
            # –ï—Å–ª–∏ –≤—Å–µ –æ–∫ –∏ –ø—Ä–æ—à–ª–∞ –∞—É–Ω—Ç–µ—Ñ–∏–∫–∞—Ü–∏—è
            else:
                await bot.edit_message_text(chat_id=message_info.chat.id, message_id=message_info.message_id,
                                            text=f'–ö–æ–ª-–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ:<b>{account_check + 1}</b> –∏–∑ <b>{len(accounts)}</b>')
                acc_good[login] = password
                access_token = authenticate['data']['access_token']
                token_id = authenticate['data']['token_id']
                puuid, name, tag ,email_verif,phone_verif= await auth_base.get_userinfo(access_token)
                entitlements_token = await auth_base.get_entitlements_token(access_token)
                region = await auth_base.get_region(access_token, token_id)
                region_output = region
                if region is None:
                    file_novalid.writelines(f'{login} - not valid\n')
                    account_step+=1
                    account_check+=1
                    continue
                if region in regions:
                    region = 'na'
                items = auth_base.get_items(item='e7c63390-eda7-46e0-bb7a-a6abdacd2433',
                                            ent_token=entitlements_token,
                                            region=region,
                                            acc_token=access_token,
                                            puuid=puuid)
                result = get_skins(items=items, login=login, password=password,email=email_verif,region=region_output,
                                   phone=phone_verif)
                print(f'–í–∞–ª–∏–¥ {login}')
                file.writelines(f'{result}\n')
                account_step += 1
                account_check += 1
    file.close()
    file_novalid.close()
    try:
        await message.reply_document(document=open(fr'results_{message.from_user.first_name}.txt', 'rb'))
    except Exception as e:
        await message.reply('–í–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ—Ç')
    try:
        await message.reply_document(document=open(fr'no_valid_{message.from_user.first_name}.txt','rb'))
    except Exception as e:
        await message.reply('–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ—Ç')
    await state.reset_state()